[
    {
        "name": "security",
        "description": "Controls that are used to assess security threats.",
        "attributes": {
            "armoBuiltin": true
        },
        "typeTags": [
            "security"
        ],
        "version": null,
        "controls": [
            {
                "name": "Resource limits",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "container",
                            "categories": [
                                "Impact - service destruction"
                            ]
                        }
                    ]
                },
                "description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the Pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
                "remediation": "Define LimitRange and Resource Limits in the namespace or in the deployment/POD yamls.",
                "long_description": "CPU and memory resources should have a limit set for every container or a namespace to prevent resource exhaustion. This control identifies all the Pods without resource limit definitions by checking their yaml definition file as well as their namespace LimitRange objects. It is also recommended to use ResourceQuota object to restrict overall namespace resources, but this is not verified by this control.",
                "test": " Check for each container if there is a \u2018limits\u2019 field defined for both cpu and memory",
                "controlID": "C-0009",
                "baseScore": 7.0,
                "example": "@controls/examples/c009.yaml",
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Immutable container filesystem",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security",
                        "compliance"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "container",
                            "categories": [
                                "Execution",
                                "Persistence"
                            ]
                        }
                    ]
                },
                "description": "Mutable container filesystem can be abused to inject malicious code or data into containers. Use immutable (read-only) filesystem to limit potential attacks.",
                "remediation": "Set the filesystem of the container to read-only when possible (POD securityContext, readOnlyRootFilesystem: true). If containers application needs to write into the filesystem, it is recommended to mount secondary filesystems for specific directories where application require write access.",
                "long_description": "By default, containers are permitted mostly unrestricted execution within their own context. An attacker who has access to a container, can create files and download scripts as he wishes, and modify the underlying application running on the container. ",
                "test": "Check whether the readOnlyRootFilesystem field in the SecurityContext is set to true. ",
                "controlID": "C-0017",
                "baseScore": 3.0,
                "example": "@controls/examples/c017.yaml",
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Exposure to Internet",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "workload-external-track",
                            "categories": [
                                "Workload Exposure"
                            ]
                        },
                        {
                            "attackTrack": "",
                            "categories": [
                                ""
                            ]
                        }
                    ]
                },
                "description": "This control detect workloads that are exposed on Internet through a Service (NodePort or LoadBalancer) or Ingress. It fails in case it find workloads connected with these resources.",
                "remediation": "The user can evaluate its exposed resources and apply relevant changes wherever needed.",
                "test": "Checks if workloads are exposed through the use of NodePort, LoadBalancer or Ingress",
                "controlID": "C-0256",
                "baseScore": 7.0,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Workload with credential access",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "workload-external-track",
                            "categories": [
                                "Credential access"
                            ]
                        }
                    ]
                },
                "description": "This control checks if workloads specifications have sensitive information in their environment variables.",
                "remediation": "Use Kubernetes secrets or Key Management Systems to store credentials.",
                "test": "Check if the workload has sensitive information in environment variables, by using list of known sensitive key names.",
                "controlID": "C-0259",
                "baseScore": 8.0,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Workload with configMap access",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "workload-external-track",
                            "categories": [
                                "Data Access"
                            ]
                        }
                    ]
                },
                "description": "This control detects workloads that have mounted ConfigMaps. Workloads with ConfigMap access can potentially expose sensitive information and elevate the risk of unauthorized access to critical resources.",
                "remediation": "Review the workloads identified by this control and assess whether it's necessary to mount these configMaps. Remove configMaps access from workloads that don't require it or ensure appropriate access controls are in place to protect sensitive information.",
                "test": "Check if any workload has mounted secrets by inspecting their specifications and verifying if secret volumes are defined",
                "controlID": "C-0258",
                "baseScore": 5.0,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Workload with PVC access",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "workload-external-track",
                            "categories": [
                                "Data Access"
                            ]
                        }
                    ]
                },
                "description": "This control detects workloads that have mounted PVC. Workloads with PVC access can potentially expose sensitive information and elevate the risk of unauthorized access to critical resources.",
                "remediation": "Review the workloads identified by this control and assess whether it's necessary to mount these PVCs. Remove PVC access from workloads that don't require it or ensure appropriate access controls are in place to protect sensitive information.",
                "test": "Check if any workload has mounted PVCs by inspecting their specifications and verifying if PVC volumes are defined",
                "controlID": "C-0257",
                "baseScore": 4.0,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Missing network policy",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "workload-external-track",
                            "categories": [
                                "Network"
                            ]
                        }
                    ]
                },
                "description": "This control detects workloads that has no NetworkPolicy configured in labels. If a network policy is not configured, it means that your applications might not have necessary control over the traffic to and from the pods, possibly leading to a security vulnerability.",
                "remediation": "Review the workloads identified by this control and assess whether it's necessary to configure a network policy for them.",
                "test": "Check that all workloads has a network policy configured in labels.",
                "controlID": "C-0260",
                "baseScore": 5.0,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "ServiceAccount token mounted",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "workload-external-track",
                            "categories": [
                                "Credential access"
                            ]
                        }
                    ]
                },
                "description": "Potential attacker may gain access to a workload and steal its ServiceAccount token. Therefore, it is recommended to disable automatic mapping of the ServiceAccount tokens in ServiceAccount configuration. Enable it only for workloads that need to use them and ensure that this ServiceAccount is not bound to an unnecessary ClusterRoleBinding or RoleBinding.",
                "remediation": "Disable automatic mounting of service account tokens to pods at the workload level, by specifying automountServiceAccountToken: false. Enable it only for workloads that need to use them and ensure that this ServiceAccount doesn't have unnecessary permissions",
                "test": "test if ServiceAccount token is mounted on workload and it has at least one binding.",
                "controlID": "C-0261",
                "baseScore": 7.0,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Workload with secret access",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "workload-external-track",
                            "categories": [
                                "Secret Access"
                            ]
                        }
                    ]
                },
                "description": "This control identifies workloads that have mounted secrets. Workloads with secret access can potentially expose sensitive information and increase the risk of unauthorized access to critical resources.",
                "remediation": "Review the workloads identified by this control and assess whether it's necessary to mount these secrets. Remove secret access from workloads that don't require it or ensure appropriate access controls are in place to protect sensitive information.",
                "test": "Check if any workload has mounted secrets by inspecting their specifications and verifying if secret volumes are defined.",
                "controlID": "C-0255",
                "baseScore": 8.0,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "HostNetwork access",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security",
                        "compliance"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "container",
                            "categories": [
                                "Discovery",
                                "Lateral movement",
                                "Impact - service access"
                            ]
                        }
                    ]
                },
                "description": "Potential attackers may gain access to a POD and inherit access to the entire host network. For example, in AWS case, they will have access to the entire VPC. This control identifies all the PODs with host network access enabled.",
                "remediation": "Only connect PODs to host network when it is necessary. If not, set the hostNetwork field of the pod spec to false, or completely remove it (false is the default). Whitelist only those PODs that must have access to host network by design.",
                "long_description": "We have it in ArmoBest",
                "test": "",
                "controlID": "C-0041",
                "baseScore": 7.0,
                "example": "@controls/examples/c041.yaml",
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Container hostPort",
                "attributes": {
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security",
                        "compliance",
                        "devops"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "container",
                            "categories": [
                                "Initial access"
                            ]
                        }
                    ]
                },
                "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
                "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
                "long_description": "Workloads (like pod, deployment, etc) that contain a container with hostport. The problem that arises is that if the scale of your workload is larger than the number of nodes in your Kubernetes cluster, the deployment fails. And any two workloads that specify the same HostPort cannot be deployed to the same node. In addition, if the host where your pods are running becomes unavailable, Kubernetes reschedules the pods to different nodes. Thus, if the IP address for your workload changes, external clients of your application will lose access to the pod. The same thing happens when you restart your pods \u2014 Kubernetes reschedules them to a different node if available.\u00a0",
                "test": "Check for each workload (with container) if it exists inside the container hostPort.\u00a0\u00a0",
                "controlID": "C-0044",
                "baseScore": 4.0,
                "example": "@controls/examples/c044.yaml",
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Writable hostPath mount",
                "attributes": {
                    "armoBuiltin": true,
                    "microsoftMitreColumns": [
                        "Persistence",
                        "Lateral Movement"
                    ],
                    "controlTypeTags": [
                        "security",
                        "compliance",
                        "devops",
                        "security-impact"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "container",
                            "categories": [
                                "Persistence",
                                "Impact - Data access in container"
                            ]
                        }
                    ]
                },
                "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host and gain persistence.",
                "remediation": "Refrain from using the hostPath mount or use the exception mechanism to remove unnecessary notifications.",
                "long_description": "hostPath volume mounts a directory or a file from the host to the container. Attackers who have permissions to create a new container in the cluster may create one with a writable hostPath volume and gain persistence on the underlying host. For example, the latter can be achieved by creating a cron job on the host.",
                "test": "Checking in POD spec if there is a hostPath volume, if it has the section mount.readOnly == false (or doesn\u2019t exist) we raise an alert.",
                "controlID": "C-0045",
                "baseScore": 8.0,
                "example": "@controls/examples/c045.yaml",
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Insecure capabilities",
                "attributes": {
                    "actionRequired": "configuration",
                    "armoBuiltin": true,
                    "controlTypeTags": [
                        "security",
                        "compliance"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "container",
                            "categories": [
                                "Privilege escalation"
                            ]
                        }
                    ]
                },
                "description": "Giving insecure or excessive capabilities to a container can increase the impact of the container compromise. This control identifies all the PODs with dangerous capabilities (see documentation pages for details).",
                "remediation": "Remove all insecure capabilities which are not necessary for the container.",
                "long_description": "Giving  insecure and unnecessary capabilities for a container can increase the impact of a container compromise.",
                "test": "Check capabilities given against a configurable blacklist of insecure capabilities (https://man7.org/linux/man-pages/man7/capabilities.7.html). ",
                "controlID": "C-0046",
                "baseScore": 7.0,
                "example": "@controls/examples/c046.yaml",
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "HostPath mount",
                "attributes": {
                    "armoBuiltin": true,
                    "microsoftMitreColumns": [
                        "Privilege escalation"
                    ],
                    "controlTypeTags": [
                        "security",
                        "compliance"
                    ],
                    "attackTracks": [
                        {
                            "attackTrack": "container",
                            "categories": [
                                "Impact - Data access in container"
                            ]
                        }
                    ]
                },
                "description": "Mounting host directory to the container can be used by attackers to get access to the underlying host. This control identifies all the PODs using hostPath mount.",
                "example": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pd\nspec:\n  containers:\n  - image: k8s.gcr.io/test-webserver\n    name: test-container\n    volumeMounts:\n    - mountPath: /test-pd\n      name: test-volume\n  volumes:\n  - name: test-volume\n    hostPath: # This field triggers failure!\n      path: /data\n      type: Directory\n",
                "remediation": "Remove hostPath mounts unless they are absolutely necessary and use exception mechanism to remove notifications.",
                "controlID": "C-0048",
                "baseScore": 7.0,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            },
            {
                "name": "Apply Security Context to Your Pods and Containers",
                "controlID": "C-0211",
                "description": "Apply Security Context to Your Pods and Containers",
                "long_description": "A security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.",
                "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers.",
                "test": "Check that pod and container security context fields according to recommendations in CIS Security Benchmark for Docker Containers",
                "manual_test": "Review the pod definitions in your cluster and verify that you have security contexts defined as appropriate.",
                "references": [
                    "https://workbench.cisecurity.org/sections/1126667/recommendations/1838636"
                ],
                "attributes": {
                    "armoBuiltin": true
                },
                "baseScore": 8,
                "impact_statement": "If you incorrectly apply security contexts, you may have trouble running the pods.",
                "default_value": "By default, no security contexts are automatically applied to pods.",
                "scanningScope": {
                    "matches": [
                        "cloud"
                    ]
                },
                "rules": []
            },
            {
                "controlID": "C-0262",
                "name": "Anonymous access enabled",
                "description": "Granting permissions to the system:unauthenticated or system:anonymous user is generally not recommended and can introduce security risks. Allowing unauthenticated access to your Kubernetes cluster can lead to unauthorized access, potential data breaches, and abuse of cluster resources.",
                "remediation": "Review and modify your cluster's RBAC configuration to ensure that only authenticated and authorized users have appropriate permissions based on their roles and responsibilities within your system.",
                "test": "Checks if ClusterRoleBinding/RoleBinding resources give permissions to anonymous user. Also checks in the apiserver if the --anonymous-auth flag is set to false",
                "attributes": {
                    "armoBuiltin": true
                },
                "baseScore": 5,
                "scanningScope": {
                    "matches": [
                        "cluster",
                        "file"
                    ]
                },
                "rules": []
            }
        ],
        "ControlsIDs": [
            "C-0009",
            "C-0017",
            "C-0256",
            "C-0259",
            "C-0258",
            "C-0257",
            "C-0260",
            "C-0261",
            "C-0255",
            "C-0041",
            "C-0044",
            "C-0045",
            "C-0046",
            "C-0048",
            "C-0211",
            "C-0262"
        ]
    }
]